package ATU.controllers;

import ATU.scenes.AutoGenerationScene;
import ATU.scenes.OutputScene;
import ATU.models.Person;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;

public class MainController implements Initializable {

    @FXML
    private TextField studentIDSearchBox;

    @FXML
    private TextField nameSearchBox;

    @FXML
    private Label K1EnergyLabel;

    @FXML
    private Label K2EnergyLabel;

    @FXML
    private Label K3Tick1Label;

    @FXML
    private Label K3Tick2Label;

    @FXML
    private Label MyPreferenceLabel;

    @FXML
    private Button autoGenerateDataButton;

    @FXML
    private TableColumn<Person, String> concerns;

    @FXML
    private TableColumn<Person, String> email;

    @FXML
    private TableColumn<Person, String> index;

    @FXML
    private TableColumn<Person, String> k1Energy;

    @FXML
    private TableColumn<Person, String> k2Energy;

    @FXML
    private TableColumn<Person, String> k3Tick1;

    @FXML
    private TableColumn<Person, String> k3Tick2;

    @FXML
    private TableColumn<Person, String> myPreference;

    @FXML
    private TableColumn<Person, String> studentID;

    @FXML
    private TableColumn<Person, String> studentName;

    @FXML
    private TableView<Person> studentTable;

    @FXML
    private Label totalNumberStudentsLabel;

    @FXML
    private Button autoTeamUpButton;

    Button getAutoTeamUpButton() {return autoTeamUpButton;}

    @FXML
    void nameSearchBoxOnKeyReleased(javafx.scene.input.KeyEvent event) {
        updateFilters();
    }

    @FXML
    void studentIDSearchBoxOnKeyReleased(javafx.scene.input.KeyEvent  event) {
        updateFilters();
    }

    @FXML
    void autoTeamUpButtonPressed(ActionEvent event) {

        System.out.println(event);
        Stage stage = new Stage();
        stage.setTitle("Output");
        OutputScene scene = null;
        try {
            scene = new OutputScene();
            Person[] personArr = person_data.stream().toArray(Person[]::new);
            scene.getController().initOutput(personArr);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Create new Stage with Scene autoGenerationScene.
     * Allows for user input for auto generation fields.
     *
     * Listens for change in students in AutoGenerationController, which updates studentsTable with data from students.
     * students is changed when Submit button is clicked.
     *
     * @param event
     */
    @FXML
    void autoGenerateDataButtonPressed(ActionEvent event) {
        Stage stage = new Stage();
        AutoGenerationScene scene = null;
        try {
            scene = new AutoGenerationScene();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        stage.setScene(scene);
        stage.show();

        AutoGenerationScene finalScene = scene;

        scene.getController().students.addListener(new ChangeListener<ArrayList<Person>>() {
            @Override
            public void changed(ObservableValue<? extends ArrayList<Person>> observableValue, ArrayList<Person> people, ArrayList<Person> t1) {
                // Update table
                initializeTable();
                var students = new ArrayList<>(finalScene.getController().students.getValue()) ;
                person_data = FXCollections.observableArrayList(students);
                filteredList = new FilteredList<>(person_data);
                initializeTable();
                initializeStats();

                // Clear and remove listener
                if (finalScene.getController().students.getValue() != null) finalScene.getController().students.getValue().clear();
                finalScene.getController().students.removeListener(this);

            }
        });
        event.consume();
    }

    private static ObservableList<Person> person_data = FXCollections.observableArrayList();

    public static final String delimiter = ",";

    FilteredList<Person> filteredList = new FilteredList<>(person_data);



    /**
     * Initialize the controller.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  {@code null} if the location is not known.
     * @param resources The resources used to localize the root object, or {@code null} if
     *                  the root object was not localized.
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // Initialization
        String currentDir = System.getProperty("user.dir");
        String csvFile = currentDir + "//student_data.csv";
        read(csvFile);
        initializeTable();
        initializeStats();
        updateFilters();

        studentTable.setMinWidth(1035);

    }

    /**
     * Update the filters according to user input
     */
    private void updateFilters() {
        studentTable.setItems(filteredList);
        filteredList.setPredicate(
                t -> t.getStudentname().toLowerCase().contains(nameSearchBox.getText().toLowerCase())
                        && t.getStudentid().contains(studentIDSearchBox.getText())
        );
    }

    // /**
    //  * Read CSV data into and save the student fields into {@link person_data}.
    //  *
    //  * @param csvFile The CSV file.
    //  */
    public static void read(String csvFile) {
        try {
            File file = new File(csvFile);
            InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "UTF-8");
            BufferedReader br = new BufferedReader(isr);
            String line = " ";
            String[] tempArr;
            br.readLine(); // skip the first line
            while ((line = br.readLine()) != null) {
                tempArr = line.split(delimiter);
                String studentName = tempArr[1]+tempArr[2];
                studentName = studentName.substring(1, studentName.length()-1);
                String studentEmail = tempArr[3];
                studentEmail = studentEmail.substring(1, studentEmail.length()-1);
                String myPreference = tempArr[8].substring(1, tempArr[8].length()-1);
                String concerns = tempArr[9].substring(1, tempArr[9].length()-1);

                person_data.add(new Person(tempArr[0], studentName, studentEmail, tempArr[4], tempArr[5],
                        tempArr[6], tempArr[7], myPreference, concerns));
            }
            br.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    // /**
    //  * Initialize {@link studentTable} with fields from {@link person_data}.
    //  *
    //  * Override each column's setCellValueFactory() to insert that column's data based on its respective
    //  * variable in {@link person_data}.
    //  */
    void initializeTable() {
        studentTable.setEditable(true);
        studentTable.getColumns().get(2).setMinWidth(200);
        studentTable.getColumns().get(3).setMinWidth(200);

        studentTable.setItems(person_data);
        // studentTable.refresh();

        var cols = studentTable.getColumns();
        index.setCellValueFactory(new PropertyValueFactory("index"));
        studentID.setCellValueFactory(new PropertyValueFactory("studentid"));
        studentName.setCellValueFactory(new PropertyValueFactory("studentname"));
        email.setCellValueFactory(new PropertyValueFactory("email"));
        k1Energy.setCellValueFactory(new PropertyValueFactory("k1energy"));
        k2Energy.setCellValueFactory(new PropertyValueFactory("k2energy"));
        k3Tick1.setCellValueFactory(new PropertyValueFactory("k3trick1"));
        k3Tick2.setCellValueFactory(new PropertyValueFactory("k3trick2"));
        myPreference.setCellValueFactory(new PropertyValueFactory("mypreference"));
        concerns.setCellValueFactory(new PropertyValueFactory("concerns"));

        studentTable.refresh();
    }

    /**
     * Initialize statistics table.
     */
    void initializeStats() {
        ObservableList<TableColumn<Person, ?>> cols = studentTable.getColumns();
        totalNumberStudentsLabel.setText(String.valueOf(Person.studentIndex));

        Integer myPreferenceCounter = 0;
        Integer K3Tick1Counter = 0;
        Integer K3Tick2Counter = 0;
        List<Integer> K1Energy = new ArrayList<Integer>();
        List<Integer> K2Energy = new ArrayList<Integer>();

        for (Person item : studentTable.getItems()) {
            K3Tick1Counter += ((String) cols.get(6).getCellObservableValue(item).getValue()).equals("1") ? 1 : 0;
            K3Tick2Counter += ((String) cols.get(7).getCellObservableValue(item).getValue()).equals("1") ? 1 : 0;
            K1Energy.add(Integer.parseInt((String) cols.get(4).getCellObservableValue(item).getValue()));
            K2Energy.add(Integer.parseInt((String) cols.get(5).getCellObservableValue(item).getValue()));

            String myPref = (String) cols.get(8).getCellObservableValue(item).getValue();
            myPreferenceCounter += myPref == "" ? 0 : Integer.parseInt(myPref);
        }
        MyPreferenceLabel.setText(myPreferenceCounter.toString());
        K3Tick2Label.setText(String.valueOf(K3Tick2Counter));
        K3Tick1Label.setText(String.valueOf(K3Tick1Counter));
        String avgK2Energy = String.format("%.1f", K2Energy.stream().mapToInt(Integer::intValue).average().getAsDouble());
        String avgK1Energy = String.format("%.1f", K1Energy.stream().mapToInt(Integer::intValue).average().getAsDouble());
        Integer minK2Energy = Collections.min(K2Energy);
        Integer maxK2Energy = Collections.max(K2Energy);
        Integer minK1Energy = Collections.min(K1Energy);
        Integer maxK1Energy = Collections.max(K1Energy);
        K2EnergyLabel.setText("(" + avgK2Energy + ", " + minK2Energy + ", " + maxK2Energy + ")");
        K1EnergyLabel.setText("(" + avgK1Energy + ", " + minK1Energy + ", " + maxK1Energy + ")");
    }

}

